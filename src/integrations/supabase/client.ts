
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://iczrgrgonwmiyrmoxtbz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImljenJncmdvbndtaXlybW94dGJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5MDcwMDAsImV4cCI6MjA2MTQ4MzAwMH0.M7gKbxlQEGobpauu4CtSFLcK73c60zgr2S8mz4fk1H8";

// Create the supabase client
const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// We define our own type that correctly includes both the original client methods AND our typed RPC function
type SupabaseClientWithTypedRPC = typeof supabaseClient & {
  rpc: (function_name: 
    "delete_ticket_by_id" | 
    "update_ticket_status" | 
    "add_ticket_response_with_admin" | 
    "check_admin_credentials" |
    "check_column_exists" |
    "add_company_email_columns", 
    params: any) => ReturnType<typeof supabaseClient.rpc>
};

// Export the supabase client with additional type definitions for RPC functions
// We need to maintain all original client methods while adding typed RPC functionality
export const supabase = {
  ...supabaseClient, // This preserves ALL original methods (from, auth, storage, etc.)
  rpc: (function_name: 
    "delete_ticket_by_id" | 
    "update_ticket_status" | 
    "add_ticket_response_with_admin" | 
    "check_admin_credentials" |
    "check_column_exists" |
    "add_company_email_columns", 
    params: any) => supabaseClient.rpc(function_name, params)
} as SupabaseClientWithTypedRPC;

// ดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดด
// Export types for use in application
// ดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดดด

// Site Settings Type
export interface SiteSettings {
  id?: string;
  primary_color?: string;
  secondary_color?: string;
  text_color?: string;
  page_title?: string;
  site_name?: string;
  favicon_url?: string;
  logo_url?: string;
  footer_text?: string;
  support_available?: boolean;
  support_message?: string;
  support_info?: string;
  support_help_fields?: Array<HelpField>;
  email_settings?: EmailSettings;
  company_sender_email?: string;
  company_sender_name?: string;
  created_at?: string;
  updated_at?: string;
}

export interface EmailSettings {
  senderEmail?: string;
  senderName?: string;
  replyTo?: string;
  host?: string;
  port?: number;
  secure?: boolean;
  username?: string;
  password?: string;
}

export interface HelpField {
  id: string;
  title: string;
  content: string;
}

// Branch Type
export interface Branch {
  id: string;
  name: string;
  created_at?: string;
}

// Resource Type
export interface ResourceType {
  id: string;
  name: string;
  created_at?: string;
}

// Branch Resource Type (tracks resources by type in each branch)
export interface BranchResourceType {
  id: string;
  branch_id: string;
  resource_type_id: string;
  available: number;
  in_use: number;
  created_at?: string;
  branch_name?: string;
  resource_type_name?: string;
}

// Branch Resource (individual resources in branches)
export interface BranchResource {
  id: string;
  branch_id: string;
  resource_type_id: string;
  name?: string;
  status: string;
  created_at?: string;
}

// Site Field Type
export interface SiteField {
  id: string;
  field_name: string;
  display_name: string;
  placeholder?: string;
  is_required: boolean;
  is_active: boolean;
  sort_order: number;
  created_at?: string;
}

// Ticket Priority Type
export type PriorityType = 'urgent' | 'medium' | 'normal';

// Ticket Type
export interface Ticket {
  id: string;
  ticket_id: string;
  branch: string;
  priority: PriorityType;
  description: string;
  image_url?: string;
  status: string;
  employee_id?: string;
  custom_fields?: Record<string, any>;
  anydesk_number?: string;
  assigned_to?: string;
  support_email?: string;
  customer_email?: string;
  extension_number?: string;
  created_at?: string;
  updated_at?: string;
}

// Ticket Response Type
export interface TicketResponse {
  id: string;
  ticket_id: string;
  admin_id?: string;
  response: string;
  is_admin?: boolean;
  private?: boolean;
  created_at?: string;
  admin_name?: string;
  admin_employee_id?: string;
}

// Admin Type
export interface Admin {
  id: string;
  username: string;
  password?: string;
  role: string;
  employee_id?: string;
  notification_email?: string;
  created_at?: string;
}
